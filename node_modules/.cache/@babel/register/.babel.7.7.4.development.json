{
  "{\"sourceRoot\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"filename\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\\\\index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.7.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "filename": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\index.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar express = require('express');\n\nvar users = require('./routes/users');\n\nvar accounts = require('./routes/accounts');\n\nvar transactions = require('./routes/transactions');\n\nvar bodyParser = require('body-parser');\n\nvar cors = require('cors');\n\nvar nodemailer = require('nodemailer'); //const stuffs = require('./routes/stuffs')\n\n\nvar email = require('./routes/email'); //const smtpTransport = require('nodemailer-smtp-transport');\n\n\nvar _require = require('pg'),\n    Pool = _require.Pool,\n    Client = _require.Client;\n\nvar client = new Client({\n  user: \"postgres\",\n  password: \"00000000\",\n  host: \"localhost\",\n  port: 5432,\n  database: \"banka\"\n}); //email('adigunibrahim574@gmail.com', 'new password', '1001')\n//console.log(stuffs)\n// const transporter = nodemailer.createTransport(smtpTransport({\n//     service: 'gmail',\n//     host: 'smtp.gmail.com',\n//     auth: {\n//       user: 'techadigun@gmail.com',\n//       pass: stuffs\n//     }\n//   }));\n// let receiver = 'adigunibrahim574@gmail.com'\n// let subject = 'still testting'\n// let text = 'Hello from nodejs'\n// let sendAnEmail = (receiver, subject, text)=>{\n//   const transporter = nodemailer.createTransport({\n//     service: 'gmail',\n//     auth: {\n//       user: 'techadigun@gmail.com',\n//       pass: stuffs\n//     }\n//   });\n//     const mailOptions = {\n//       from: 'techadigun@gmail.com',\n//       to: receiver,\n//       subject: subject,\n//       text: text\n//     };\n//     transporter.sendMail(mailOptions, function(error, info){\n//       if (error) {\n//         console.log(error);\n//       } else {\n//         console.log('Email sent: ' + info.response);\n//       }\n//     });\n// }\n// sendAnEmail(receiver,subject,text)\n\nexecute();\n\nfunction execute() {\n  var results;\n  return regeneratorRuntime.async(function execute$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return regeneratorRuntime.awrap(client.connect());\n\n        case 3:\n          console.log(\"connected succesfully\");\n          _context.prev = 4;\n          _context.next = 7;\n          return regeneratorRuntime.awrap(client.query('select * from users'));\n\n        case 7:\n          results = _context.sent;\n          _context.next = 13;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](4);\n          console.log(\"query error\");\n\n        case 13:\n          _context.next = 18;\n          break;\n\n        case 15:\n          _context.prev = 15;\n          _context.t1 = _context[\"catch\"](0);\n          console.log(\"connection error\");\n\n        case 18:\n          _context.prev = 18;\n          _context.next = 21;\n          return regeneratorRuntime.awrap(client.end());\n\n        case 21:\n          console.log(\"client disconnected (index.js)\");\n          return _context.finish(18);\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 15, 18, 23], [4, 10]]);\n}\n\nvar app = express();\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\napp.use(bodyParser.json());\napp.use(cors());\nvar port = process.env.PORT || 3000;\napp.get(\"/\", function (req, res) {\n  res.send('welcome to heaven y\\'all bunch of mofos');\n});\napp.use('/users', users);\napp.use('/accounts', accounts);\napp.use('/transactions', transactions);\napp.listen(port, function () {\n  console.log(\"server started on port \".concat(port));\n}); //\"nodemon --exec babel-node index.js\"\n// const pool = new Pool({\n//     user: 'postgres',\n//     host: 'localhost',\n//     database: 'banka',\n//     password: 'adigun96',\n//     port: 5432,\n//   })\n//   //pool.query('SELECT NOW()', (err, res) => {\n//     pool.query('SELECT * FROM users',(err, res)=>{\n//     console.log(err, res.rows)\n//     pool.end()\n//   })\n//   client.connect()\n//   //client.query('SELECT NOW()', (err, res) => {\n//   client.query('SELECT * FROM users',(err, res)=>{  \n//     console.log(err, res.rows)\n//     client.end()\n//   })\n// client.connect()\n// .then(()=>console.log(\"connected succesfully\"))\n// .then(()=>client.query('select * from users'))\n// .then(results=>console.log(results.rows))\n// //client.end()})\n// .catch((e)=>{console.log(\"this is the error\",e)\n// client.end()})\n// //.finally(client.end())\n// client.connect((err,res)=>{\n//     if(err){\n//         console.log(err)\n//         client.end()\n//     }\n//     else if (res){\n//         console.log(res)\n//         client.query('select * from users',(err1,res1)=>{\n//             if(err1){\n//                 console.log(\"error1:\",err1)\n//             }\n//             else if(res1){\n//                 console.log(res1)\n//             }\n//         })\n//         client.end()\n//     }\n// })\n// async function execute(){\n//     await client.connect()\n//     console.log(\"connected succesfully\")\n//     const results = await client.query('select * from users')\n//     console.log(results.rows)\n//     await client.end()\n//     console.log(\"client disconnected\")\n// }\n// const transporter = nodemailer.createTransport({\n//   service: 'gmail',\n//   auth: {\n//     user: 'techadigun@gmail.com',\n//     pass: stuffs\n//   }\n// });\n//   const mailOptions = {\n//     from: 'techadigun@gmail.com',\n//     to: 'adigunibrahim574@gmail.com',\n//     subject: 'Sending Email using Node.js',\n//     text: 'That was easy!'\n//   };\n//   transporter.sendMail(mailOptions, function(error, info){\n//     if (error) {\n//       console.log(error);\n//     } else {\n//       console.log('Email sent: ' + info.response);\n//     }\n//   });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "express",
        "require",
        "users",
        "accounts",
        "transactions",
        "bodyParser",
        "cors",
        "nodemailer",
        "email",
        "Pool",
        "Client",
        "client",
        "user",
        "password",
        "host",
        "port",
        "database",
        "execute",
        "connect",
        "console",
        "log",
        "query",
        "results",
        "end",
        "app",
        "use",
        "urlencoded",
        "extended",
        "json",
        "process",
        "env",
        "PORT",
        "get",
        "req",
        "res",
        "send",
        "listen"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "sourcesContent": [
        "const express = require ('express')\r\nconst users = require ('./routes/users')\r\nconst accounts = require('./routes/accounts')\r\nconst transactions = require('./routes/transactions')\r\nconst bodyParser = require('body-parser')\r\nconst cors = require('cors')\r\nconst nodemailer = require('nodemailer')\r\n//const stuffs = require('./routes/stuffs')\r\nconst email = require('./routes/email')\r\n//const smtpTransport = require('nodemailer-smtp-transport');\r\n\r\nconst { Pool, Client } = require('pg')\r\n\r\nconst client = new Client({\r\n    user:\"postgres\",\r\n    password:\"00000000\",\r\n    host:\"localhost\",\r\n    port:5432,\r\n    database:\"banka\"\r\n})\r\n\r\n//email('adigunibrahim574@gmail.com', 'new password', '1001')\r\n//console.log(stuffs)\r\n\r\n\r\n// const transporter = nodemailer.createTransport(smtpTransport({\r\n//     service: 'gmail',\r\n//     host: 'smtp.gmail.com',\r\n//     auth: {\r\n//       user: 'techadigun@gmail.com',\r\n//       pass: stuffs\r\n//     }\r\n//   }));\r\n\r\n// let receiver = 'adigunibrahim574@gmail.com'\r\n// let subject = 'still testting'\r\n// let text = 'Hello from nodejs'\r\n\r\n// let sendAnEmail = (receiver, subject, text)=>{\r\n\r\n//   const transporter = nodemailer.createTransport({\r\n//     service: 'gmail',\r\n//     auth: {\r\n//       user: 'techadigun@gmail.com',\r\n//       pass: stuffs\r\n//     }\r\n//   });\r\n    \r\n//     const mailOptions = {\r\n//       from: 'techadigun@gmail.com',\r\n//       to: receiver,\r\n//       subject: subject,\r\n//       text: text\r\n//     };\r\n    \r\n//     transporter.sendMail(mailOptions, function(error, info){\r\n//       if (error) {\r\n//         console.log(error);\r\n//       } else {\r\n//         console.log('Email sent: ' + info.response);\r\n//       }\r\n//     });\r\n  \r\n\r\n// }\r\n\r\n// sendAnEmail(receiver,subject,text)\r\n\r\n\r\n\r\nexecute()\r\n\r\nasync function execute(){\r\n    try {\r\n        await client.connect()\r\n        console.log(\"connected succesfully\")\r\n        try {\r\n            const results = await client.query('select * from users')\r\n            //console.log(results.rows)\r\n        }\r\n        catch(e){\r\n            console.log(\"query error\")\r\n        }\r\n      } catch(err) {\r\n        console.log(\"connection error\");\r\n      }\r\n      finally{\r\n          await client.end()\r\n          console.log(\"client disconnected (index.js)\")\r\n      }\r\n    // await client.connect()\r\n    // console.log(\"connected succesfully\")\r\n    // const results = await client.query('select * from users')\r\n    // console.log(results.rows)\r\n    // await client.end()\r\n    // console.log(\"client disconnected\")\r\n}\r\n\r\n\r\nconst app = express()\r\n\r\napp.use(bodyParser.urlencoded({extended:false}))\r\napp.use(bodyParser.json())\r\napp.use(cors())\r\n\r\nconst port = process.env.PORT || 3000\r\n\r\napp.get(\"/\",(req,res)=>{\r\n    res.send('welcome to heaven y\\'all bunch of mofos')\r\n})\r\n\r\n\r\napp.use('/users',users)\r\n\r\napp.use('/accounts',accounts)\r\n\r\napp.use('/transactions',transactions)\r\n\r\napp.listen(port,()=>{\r\n    console.log(`server started on port ${port}`)\r\n})\r\n\r\n//\"nodemon --exec babel-node index.js\"\r\n\r\n\r\n\r\n\r\n// const pool = new Pool({\r\n//     user: 'postgres',\r\n//     host: 'localhost',\r\n//     database: 'banka',\r\n//     password: 'adigun96',\r\n//     port: 5432,\r\n//   })\r\n//   //pool.query('SELECT NOW()', (err, res) => {\r\n//     pool.query('SELECT * FROM users',(err, res)=>{\r\n//     console.log(err, res.rows)\r\n//     pool.end()\r\n//   })\r\n  \r\n//   client.connect()\r\n//   //client.query('SELECT NOW()', (err, res) => {\r\n//   client.query('SELECT * FROM users',(err, res)=>{  \r\n//     console.log(err, res.rows)\r\n//     client.end()\r\n//   })\r\n\r\n// client.connect()\r\n// .then(()=>console.log(\"connected succesfully\"))\r\n// .then(()=>client.query('select * from users'))\r\n// .then(results=>console.log(results.rows))\r\n// //client.end()})\r\n// .catch((e)=>{console.log(\"this is the error\",e)\r\n// client.end()})\r\n// //.finally(client.end())\r\n\r\n\r\n// client.connect((err,res)=>{\r\n//     if(err){\r\n//         console.log(err)\r\n//         client.end()\r\n//     }\r\n//     else if (res){\r\n//         console.log(res)\r\n//         client.query('select * from users',(err1,res1)=>{\r\n//             if(err1){\r\n//                 console.log(\"error1:\",err1)\r\n//             }\r\n//             else if(res1){\r\n//                 console.log(res1)\r\n//             }\r\n//         })\r\n//         client.end()\r\n//     }\r\n// })\r\n\r\n\r\n// async function execute(){\r\n//     await client.connect()\r\n//     console.log(\"connected succesfully\")\r\n//     const results = await client.query('select * from users')\r\n//     console.log(results.rows)\r\n//     await client.end()\r\n//     console.log(\"client disconnected\")\r\n// }\r\n\r\n\r\n// const transporter = nodemailer.createTransport({\r\n//   service: 'gmail',\r\n//   auth: {\r\n//     user: 'techadigun@gmail.com',\r\n//     pass: stuffs\r\n//   }\r\n// });\r\n  \r\n//   const mailOptions = {\r\n//     from: 'techadigun@gmail.com',\r\n//     to: 'adigunibrahim574@gmail.com',\r\n//     subject: 'Sending Email using Node.js',\r\n//     text: 'That was easy!'\r\n//   };\r\n  \r\n//   transporter.sendMail(mailOptions, function(error, info){\r\n//     if (error) {\r\n//       console.log(error);\r\n//     } else {\r\n//       console.log('Email sent: ' + info.response);\r\n//     }\r\n//   });"
      ]
    },
    "sourceType": "script",
    "mtime": 1575595640321
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\\\\routes\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"filename\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\\\\routes\\\\users.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.7.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "filename": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes\\users.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes\\users.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes\\users.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes",
        "sourceFileName": "users.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar express = require('express');\n\nvar router = express.Router();\n\nvar User = require('../models/user');\n\nvar _require = require('pg'),\n    Pool = _require.Pool,\n    Client = _require.Client; // const client = new Client({\n//     user:\"postgres\",\n//     password:\"00000000\",\n//     host:\"localhost\",\n//     port:5432,\n//     database:\"banka\"\n// })\n\n\nvar pool = new Pool({\n  user: \"postgres\",\n  password: \"00000000\",\n  host: \"localhost\",\n  port: 5432,\n  database: \"banka\"\n});\nvar app = express();\nrouter.get(\"/\", function (req, res) {\n  res.send(\"get users\");\n});\nrouter.post(\"/add\", function (req, res) {\n  var queryy = {\n    text: 'INSERT INTO users(email, firstname, lastname, password, isadmin, imgurl) VALUES($1, $2, $3, $4, $5, $6)',\n    values: [req.body.email, req.body.firstName, req.body.lastName, req.body.password, req.body.isAdmin, req.body.imgUrl]\n  };\n  pool.connect().then(pool.query(queryy).then(function (result) {\n    res.status(200);\n    res.json({\n      success: true,\n      data: req.body\n    }); //pool.end()\n  })[\"catch\"](function (err) {\n    console.log(\"this is error1:\", err);\n    res.status(400);\n    res.json({\n      success: false\n    });\n    console.log(\"prob1\");\n    pool.end();\n  }))[\"catch\"](function (err) {\n    console.log(\"this is error2:\", err);\n    res.status(400);\n    res.json({\n      success: false\n    });\n    console.log(\"prob2\");\n    pool.end();\n  });\n});\nrouter.post(\"/login\", function (req, res) {\n  var credentials = {\n    email: req.body.email,\n    password: req.body.password,\n    id: 2\n  };\n  pool.connect().then(function () {\n    pool.query('select * from users where email = $1', [credentials.email]).then(function (result) {\n      console.log(\"f**king result:\", result.rows);\n\n      if (result.rows.length != 0) {\n        if (result.rows[0].password == credentials.password) {\n          res.status(200);\n          res.json({\n            success: true,\n            data: result.rows[0]\n          });\n        } else {\n          res.status(400);\n          res.json({\n            success: false\n          });\n        }\n      } else {\n        res.status(404);\n        res.json({\n          success: false,\n          msg: \"user not found\"\n        });\n      }\n    })[\"catch\"](function (err) {\n      console.log(err);\n      pool.end();\n    });\n  })[\"catch\"](function (err) {\n    console.log(err);\n    pool.end();\n  });\n});\nrouter.post(\"/resetpassword\", function (req, res) {\n  newpassword = parseInt(Math.random() * 10000);\n  console.log(newpassword);\n  pool.connect(); //checking if email is valid starts\n\n  pool.query('select * from users where email = $1', [req.body.email]).then(function (result) {\n    console.log(\"f**king result:\", result.rows);\n\n    if (result.rows.length != 0) {\n      pool.query('UPDATE users SET password = $1 WHERE email = $2', [newpassword, req.body.email]).then(function (result) {\n        res.status(200);\n        res.json({\n          success: true,\n          password: newpassword\n        }); //pool.end()\n      })[\"catch\"](function (err) {\n        console.log(\"this is error1:\", err);\n        res.status(400);\n        res.json({\n          success: false\n        });\n        console.log(\"prob1\");\n        pool.end();\n      });\n    } else {\n      res.status(404);\n      res.json({\n        success: false,\n        msg: \"user not found\"\n      });\n    }\n  })[\"catch\"](function (err) {\n    console.log(err);\n    pool.end();\n  }); //checking if email is valid ends\n  //  .then(pool.query('UPDATE users SET password = $1 WHERE email = $2',\n  //                     [newpassword, req.body.email])\n  //     .then(result=>{\n  //         res.status(200)\n  //         res.json({success:true,password:newpassword})\n  //         //pool.end()\n  //     })\n  //     .catch(err=>{\n  //         console.log(\"this is error1:\",err)\n  //         res.status(400)\n  //         res.json({success:false})\n  //         console.log(\"prob1\")\n  //         pool.end()\n  //     }))\n  //  .catch(err=>{\n  //      console.log(\"this is error2:\",err)\n  //      res.status(400)\n  //      res.json({success:false})\n  //      console.log(\"prob2\")\n  //      pool.end()\n  //     })\n}); //.finally(console.log(\"finally\"))\n//     execute()\n// async function execute(){\n//     try {\n//         await client.connect()\n//         console.log(\"connected succesfully (post user)\")\n//         try {\n//             const queryy = {\n//                 text: 'INSERT INTO users(email, firstname, lastname, password, isadmin) VALUES($1, $2, $3, $4, $5)',\n//                 values: [req.body.email, req.body.firstName, req.body.lastName, req.body.password, true]\n//               }\n//             const results = await client.query(queryy)\n//         }\n//         catch(e){\n//             console.log(\"query error (post user)\",e)\n//         }\n//       } catch(err) {\n//         console.log(\"connection error (post user)\",err)\n//       }\n//       finally{\n//         await client.end()\n//         console.log(\"client disconnected (post user)\")\n//         callback()\n//       }\n// }\n//client.end() \n// User.addstaff(req,(err,user, eee)=>{\n//     if(err){\n//         console.log(\"user not created\")\n//         res.json({success:false})\n//     }\n//     else if(user){\n//         console.log(\"user created\")\n//         res.json({success:true})\n//     }\n//     else if(eee){\n//         console.log(\"i dont know\")\n//     }\n//     else{\n//         console.log(\"shit\")\n//     }\n// })\n\nmodule.exports = router; // client.connect()\n// .then(()=>console.log(\"connected succesfully\"))\n// .then(()=>client.query('select * from users'))\n// .then(results=>console.log(results.rows))\n// //client.end()})\n// .catch((e)=>{console.log(\"this is the error\",e)\n// client.end()})\n// //.finally(client.end())\n// const pool = new Pool({\n//     user: 'postgres',\n//     host: 'localhost',\n//     database: 'banka',\n//     password: 'adigun96',\n//     port: 5432,\n//   })\n//   //pool.query('SELECT NOW()', (err, res) => {\n//     pool.query('SELECT * FROM users',(err, res)=>{\n//     console.log(err, res.rows)\n//     pool.end()\n//   })\n//   client.connect()\n//   //client.query('SELECT NOW()', (err, res) => {\n//   client.query('SELECT * FROM users',(err, res)=>{  \n//     console.log(err, res.rows)\n//     client.end()\n//   })\n// client.connect()\n// .then(()=>console.log(\"connected succesfully\"))\n// .then(()=>client.query('select * from users'))\n// .then(results=>console.log(results.rows))\n// //client.end()})\n// .catch((e)=>{console.log(\"this is the error\",e)\n// client.end()})\n// //.finally(client.end())\n// client.connect((err,res)=>{\n//     if(err){\n//         console.log(err)\n//         client.end()\n//     }\n//     else if (res){\n//         console.log(res)\n//         client.query('select * from users',(err1,res1)=>{\n//             if(err1){\n//                 console.log(\"error1:\",err1)\n//             }\n//             else if(res1){\n//                 console.log(res1)\n//             }\n//         })\n//         client.end()\n//     }\n// })\n// async function execute(){\n//     await client.connect()\n//     console.log(\"connected succesfully\")\n//     const results = await client.query('select * from users')\n//     console.log(results.rows)\n//     await client.end()\n//     console.log(\"client disconnected\")\n// }\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "users.js"
      ],
      "names": [
        "express",
        "require",
        "router",
        "Router",
        "User",
        "Pool",
        "Client",
        "pool",
        "user",
        "password",
        "host",
        "port",
        "database",
        "app",
        "get",
        "req",
        "res",
        "send",
        "post",
        "queryy",
        "text",
        "values",
        "body",
        "email",
        "firstName",
        "lastName",
        "isAdmin",
        "imgUrl",
        "connect",
        "then",
        "query",
        "result",
        "status",
        "json",
        "success",
        "data",
        "err",
        "console",
        "log",
        "end",
        "credentials",
        "id",
        "rows",
        "length",
        "msg",
        "newpassword",
        "parseInt",
        "Math",
        "random",
        "module",
        "exports"
      ],
      "mappings": "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AG,CAACgB,MAAJ,CAAW,GAAX;AACAhB,QAAAA,GAAG,CAACiB,IAAJ,CAAS;AAACC,UAAAA,OAAO,EAAC,IAAT;AAAczB,UAAAA,QAAQ,EAACoC;AAAvB,SAAT,EAFU,CAGV;AACH,OAND,WAOO,UAAAT,GAAG,EAAE;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BF,GAA9B;AACApB,QAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX;AACAhB,QAAAA,GAAG,CAACiB,IAAJ,CAAS;AAACC,UAAAA,OAAO,EAAC;AAAT,SAAT;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA/B,QAAAA,IAAI,CAACgC,GAAL;AACH,OAbD,CAAD;AAcJ,KAfD,MAgBI;AACAvB,MAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX;AACAhB,MAAAA,GAAG,CAACiB,IAAJ,CAAS;AAACC,QAAAA,OAAO,EAAC,KAAT;AAAeU,QAAAA,GAAG,EAAC;AAAnB,OAAT;AACH;AACJ,GAvBH,WAwBO,UAAAR,GAAG,EAAE;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACE7B,IAAAA,IAAI,CAACgC,GAAL;AAAW,GA1BjB,EALoC,CAgCpC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,CAxDD,E,CA4DA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;AAEH;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEJU,MAAM,CAACC,OAAP,GAAiBhD,MAAjB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
      "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes",
      "sourcesContent": [
        "const express = require('express')\r\nconst router = express.Router()\r\nconst User = require ('../models/user')\r\n\r\nconst { Pool, Client } = require('pg')\r\n\r\n// const client = new Client({\r\n//     user:\"postgres\",\r\n//     password:\"00000000\",\r\n//     host:\"localhost\",\r\n//     port:5432,\r\n//     database:\"banka\"\r\n// })\r\n\r\nconst pool = new Pool({\r\n    user:\"postgres\",\r\n    password:\"00000000\",\r\n    host:\"localhost\",\r\n    port:5432,\r\n    database:\"banka\"\r\n})\r\n\r\n\r\nconst app = express()\r\nrouter.get(\"/\",(req,res)=>{\r\n    res.send(\"get users\")\r\n})\r\n\r\nrouter.post(\"/add\",(req,res)=>{\r\n    const queryy = {\r\n                        text: 'INSERT INTO users(email, firstname, lastname, password, isadmin, imgurl) VALUES($1, $2, $3, $4, $5, $6)',\r\n                        values: [req.body.email, req.body.firstName, req.body.lastName, req.body.password, req.body.isAdmin, req.body.imgUrl]\r\n                    }\r\n    pool.connect()\r\n     .then(pool.query(queryy)\r\n        .then(result=>{\r\n            res.status(200)\r\n            res.json({success:true,data:req.body})\r\n            //pool.end()\r\n        })\r\n        .catch(err=>{\r\n            console.log(\"this is error1:\",err)\r\n            res.status(400)\r\n            res.json({success:false})\r\n            console.log(\"prob1\")\r\n            pool.end()\r\n        }))\r\n     .catch(err=>{\r\n         console.log(\"this is error2:\",err)\r\n         res.status(400)\r\n         res.json({success:false})\r\n         console.log(\"prob2\")\r\n         pool.end()\r\n        })\r\n     \r\n})\r\n\r\nrouter.post(\"/login\",(req,res)=>{\r\n    let credentials = {\r\n        email:req.body.email,\r\n        password:req.body.password,\r\n        id:2,\r\n    }\r\n    pool.connect()\r\n     .then(()=> {\r\n         pool.query('select * from users where email = $1', [credentials.email])\r\n          .then((result)=>{\r\n              console.log(\"f**king result:\",result.rows)\r\n                if(result.rows.length!=0){\r\n                    if(result.rows[0].password==credentials.password){\r\n                        res.status(200)\r\n                        res.json({success:true,data:result.rows[0]})\r\n                    }\r\n                    else{\r\n                        res.status(400)\r\n                        res.json({success:false})\r\n                    }\r\n                }\r\n                else{\r\n                    res.status(404)\r\n                    res.json({success:false,msg:\"user not found\"})\r\n                }\r\n            })\r\n          .catch(err=>{\r\n              console.log(err)\r\n                pool.end()})\r\n        })\r\n     .catch((err)=>{\r\n         console.log(err)\r\n            pool.end()})\r\n\r\n})\r\n\r\nrouter.post(\"/resetpassword\",(req,res)=>{\r\n    newpassword = parseInt(Math.random()*10000)\r\n    console.log(newpassword)\r\n    pool.connect()\r\n    //checking if email is valid starts\r\n    pool.query('select * from users where email = $1', [req.body.email])\r\n    .then((result)=>{\r\n        console.log(\"f**king result:\",result.rows)\r\n          if(result.rows.length!=0){\r\n               (pool.query('UPDATE users SET password = $1 WHERE email = $2',\r\n                        [newpassword, req.body.email])\r\n                .then(result=>{\r\n                    res.status(200)\r\n                    res.json({success:true,password:newpassword})\r\n                    //pool.end()\r\n                })\r\n                .catch(err=>{\r\n                    console.log(\"this is error1:\",err)\r\n                    res.status(400)\r\n                    res.json({success:false})\r\n                    console.log(\"prob1\")\r\n                    pool.end()\r\n                }))\r\n          }\r\n          else{\r\n              res.status(404)\r\n              res.json({success:false,msg:\"user not found\"})\r\n          }\r\n      })\r\n    .catch(err=>{\r\n        console.log(err)\r\n          pool.end()})\r\n    //checking if email is valid ends\r\n\r\n    //  .then(pool.query('UPDATE users SET password = $1 WHERE email = $2',\r\n    //                     [newpassword, req.body.email])\r\n    //     .then(result=>{\r\n    //         res.status(200)\r\n    //         res.json({success:true,password:newpassword})\r\n    //         //pool.end()\r\n    //     })\r\n    //     .catch(err=>{\r\n    //         console.log(\"this is error1:\",err)\r\n    //         res.status(400)\r\n    //         res.json({success:false})\r\n    //         console.log(\"prob1\")\r\n    //         pool.end()\r\n    //     }))\r\n    //  .catch(err=>{\r\n    //      console.log(\"this is error2:\",err)\r\n    //      res.status(400)\r\n    //      res.json({success:false})\r\n    //      console.log(\"prob2\")\r\n    //      pool.end()\r\n    //     })\r\n     \r\n})\r\n\r\n\r\n\r\n//.finally(console.log(\"finally\"))\r\n\r\n//     execute()\r\n\r\n// async function execute(){\r\n//     try {\r\n//         await client.connect()\r\n//         console.log(\"connected succesfully (post user)\")\r\n//         try {\r\n//             const queryy = {\r\n//                 text: 'INSERT INTO users(email, firstname, lastname, password, isadmin) VALUES($1, $2, $3, $4, $5)',\r\n//                 values: [req.body.email, req.body.firstName, req.body.lastName, req.body.password, true]\r\n//               }\r\n//             const results = await client.query(queryy)\r\n//         }\r\n//         catch(e){\r\n//             console.log(\"query error (post user)\",e)\r\n//         }\r\n//       } catch(err) {\r\n//         console.log(\"connection error (post user)\",err)\r\n//       }\r\n//       finally{\r\n//         await client.end()\r\n//         console.log(\"client disconnected (post user)\")\r\n//         callback()\r\n//       }\r\n// }\r\n   //client.end() \r\n\r\n// User.addstaff(req,(err,user, eee)=>{\r\n    //     if(err){\r\n    //         console.log(\"user not created\")\r\n    //         res.json({success:false})\r\n    //     }\r\n    //     else if(user){\r\n    //         console.log(\"user created\")\r\n    //         res.json({success:true})\r\n    //     }\r\n    //     else if(eee){\r\n    //         console.log(\"i dont know\")\r\n    //     }\r\n    //     else{\r\n    //         console.log(\"shit\")\r\n    //     }\r\n    // })\r\n\r\nmodule.exports = router\r\n\r\n\r\n// client.connect()\r\n// .then(()=>console.log(\"connected succesfully\"))\r\n// .then(()=>client.query('select * from users'))\r\n// .then(results=>console.log(results.rows))\r\n// //client.end()})\r\n// .catch((e)=>{console.log(\"this is the error\",e)\r\n// client.end()})\r\n// //.finally(client.end())\r\n\r\n// const pool = new Pool({\r\n//     user: 'postgres',\r\n//     host: 'localhost',\r\n//     database: 'banka',\r\n//     password: 'adigun96',\r\n//     port: 5432,\r\n//   })\r\n//   //pool.query('SELECT NOW()', (err, res) => {\r\n//     pool.query('SELECT * FROM users',(err, res)=>{\r\n//     console.log(err, res.rows)\r\n//     pool.end()\r\n//   })\r\n  \r\n//   client.connect()\r\n//   //client.query('SELECT NOW()', (err, res) => {\r\n//   client.query('SELECT * FROM users',(err, res)=>{  \r\n//     console.log(err, res.rows)\r\n//     client.end()\r\n//   })\r\n\r\n// client.connect()\r\n// .then(()=>console.log(\"connected succesfully\"))\r\n// .then(()=>client.query('select * from users'))\r\n// .then(results=>console.log(results.rows))\r\n// //client.end()})\r\n// .catch((e)=>{console.log(\"this is the error\",e)\r\n// client.end()})\r\n// //.finally(client.end())\r\n\r\n\r\n// client.connect((err,res)=>{\r\n//     if(err){\r\n//         console.log(err)\r\n//         client.end()\r\n//     }\r\n//     else if (res){\r\n//         console.log(res)\r\n//         client.query('select * from users',(err1,res1)=>{\r\n//             if(err1){\r\n//                 console.log(\"error1:\",err1)\r\n//             }\r\n//             else if(res1){\r\n//                 console.log(res1)\r\n//             }\r\n//         })\r\n//         client.end()\r\n//     }\r\n// })\r\n\r\n\r\n// async function execute(){\r\n//     await client.connect()\r\n//     console.log(\"connected succesfully\")\r\n//     const results = await client.query('select * from users')\r\n//     console.log(results.rows)\r\n//     await client.end()\r\n//     console.log(\"client disconnected\")\r\n// }\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1575593012793
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\\\\models\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"filename\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\\\\models\\\\user.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.7.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\models",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "filename": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\models\\user.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\models\\user.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\models\\user.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\models",
        "sourceFileName": "user.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _require = require('pg'),\n    Pool = _require.Pool,\n    Client = _require.Client;\n\nvar client = new Client({\n  user: \"postgres\",\n  password: \"00000000\",\n  host: \"localhost\",\n  port: 5432,\n  database: \"banka\"\n});\n\nmodule.exports.addstaff = function (req, callback) {} //         execute()\n// async function execute(){\n//     try {\n//         await client.connect()\n//         console.log(\"connected succesfully (post user)\")\n//         try {\n//             const queryy = {\n//                 text: 'INSERT INTO users(email, firstname, lastname, password, isadmin) VALUES($1, $2, $3, $4, $5)',\n//                 values: [req.body.email, req.body.firstName, req.body.lastName, req.body.password, true]\n//               }\n//             const results = await client.query(queryy)\n//         }\n//         catch(e){\n//             console.log(\"query error (post user)\",e)\n//         }\n//       } catch(err) {\n//         console.log(\"connection error (post user)\",err)\n//       }\n//       finally{\n//         await client.end()\n//         console.log(\"client disconnected (post user)\")\n//         callback()\n//       }\n// }\n//console.log(req.body)\n// const queryy = {\n//     text: 'INSERT INTO users(email, firstname, lastname, password, isadmin) VALUES($1, $2, $3, $4, $5)',\n//     values: [req.body.email, req.body.firstName, req.body.lastName, req.body.password, true]\n//   }\n// client.query(queryy,callback())\n//to test\n//   client.query(queryy, (err1,res1)=>{\n//       if(err1){\n//           res.json({status:false})\n//       }\n//       else if (res1){\n//           res.json({status:true})\n//       }\n//   })\n//to test\n//console.log(result)\n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXIuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIlBvb2wiLCJDbGllbnQiLCJjbGllbnQiLCJ1c2VyIiwicGFzc3dvcmQiLCJob3N0IiwicG9ydCIsImRhdGFiYXNlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFkZHN0YWZmIiwicmVxIiwiY2FsbGJhY2siXSwibWFwcGluZ3MiOiI7O2VBQXlCQSxPQUFPLENBQUMsSUFBRCxDO0lBQXhCQyxJLFlBQUFBLEk7SUFBTUMsTSxZQUFBQSxNOztBQUVkLElBQU1DLE1BQU0sR0FBRyxJQUFJRCxNQUFKLENBQVc7QUFDdEJFLEVBQUFBLElBQUksRUFBQyxVQURpQjtBQUV0QkMsRUFBQUEsUUFBUSxFQUFDLFVBRmE7QUFHdEJDLEVBQUFBLElBQUksRUFBQyxXQUhpQjtBQUl0QkMsRUFBQUEsSUFBSSxFQUFDLElBSmlCO0FBS3RCQyxFQUFBQSxRQUFRLEVBQUM7QUFMYSxDQUFYLENBQWY7O0FBVUFDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxRQUFmLEdBQTBCLFVBQUNDLEdBQUQsRUFBS0MsUUFBTCxFQUFnQixDQTJCekMsQ0EzQnlCLENBQzFCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEvQ0oiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxBZGlndW5cXERlc2t0b3BcXGJhbmthXFxiYW5rYS1hcGlcXG1vZGVscyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgUG9vbCwgQ2xpZW50IH0gPSByZXF1aXJlKCdwZycpXHJcblxyXG5jb25zdCBjbGllbnQgPSBuZXcgQ2xpZW50KHtcclxuICAgIHVzZXI6XCJwb3N0Z3Jlc1wiLFxyXG4gICAgcGFzc3dvcmQ6XCIwMDAwMDAwMFwiLFxyXG4gICAgaG9zdDpcImxvY2FsaG9zdFwiLFxyXG4gICAgcG9ydDo1NDMyLFxyXG4gICAgZGF0YWJhc2U6XCJiYW5rYVwiXHJcbn0pXHJcblxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzLmFkZHN0YWZmID0gKHJlcSxjYWxsYmFjayk9PntcclxuLy8gICAgICAgICBleGVjdXRlKClcclxuXHJcbi8vIGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGUoKXtcclxuLy8gICAgIHRyeSB7XHJcbi8vICAgICAgICAgYXdhaXQgY2xpZW50LmNvbm5lY3QoKVxyXG4vLyAgICAgICAgIGNvbnNvbGUubG9nKFwiY29ubmVjdGVkIHN1Y2Nlc2Z1bGx5IChwb3N0IHVzZXIpXCIpXHJcbi8vICAgICAgICAgdHJ5IHtcclxuLy8gICAgICAgICAgICAgY29uc3QgcXVlcnl5ID0ge1xyXG4vLyAgICAgICAgICAgICAgICAgdGV4dDogJ0lOU0VSVCBJTlRPIHVzZXJzKGVtYWlsLCBmaXJzdG5hbWUsIGxhc3RuYW1lLCBwYXNzd29yZCwgaXNhZG1pbikgVkFMVUVTKCQxLCAkMiwgJDMsICQ0LCAkNSknLFxyXG4vLyAgICAgICAgICAgICAgICAgdmFsdWVzOiBbcmVxLmJvZHkuZW1haWwsIHJlcS5ib2R5LmZpcnN0TmFtZSwgcmVxLmJvZHkubGFzdE5hbWUsIHJlcS5ib2R5LnBhc3N3b3JkLCB0cnVlXVxyXG4vLyAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGNsaWVudC5xdWVyeShxdWVyeXkpXHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGNhdGNoKGUpe1xyXG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInF1ZXJ5IGVycm9yIChwb3N0IHVzZXIpXCIsZSlcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgIH0gY2F0Y2goZXJyKSB7XHJcbi8vICAgICAgICAgY29uc29sZS5sb2coXCJjb25uZWN0aW9uIGVycm9yIChwb3N0IHVzZXIpXCIsZXJyKVxyXG4vLyAgICAgICB9XHJcbi8vICAgICAgIGZpbmFsbHl7XHJcbi8vICAgICAgICAgYXdhaXQgY2xpZW50LmVuZCgpXHJcbi8vICAgICAgICAgY29uc29sZS5sb2coXCJjbGllbnQgZGlzY29ubmVjdGVkIChwb3N0IHVzZXIpXCIpXHJcbi8vICAgICAgICAgY2FsbGJhY2soKVxyXG4vLyAgICAgICB9XHJcbi8vIH1cclxuICAgICAgICBcclxufVxyXG5cclxuXHJcblxyXG4vL2NvbnNvbGUubG9nKHJlcS5ib2R5KVxyXG4gICAgLy8gY29uc3QgcXVlcnl5ID0ge1xyXG4gICAgLy8gICAgIHRleHQ6ICdJTlNFUlQgSU5UTyB1c2VycyhlbWFpbCwgZmlyc3RuYW1lLCBsYXN0bmFtZSwgcGFzc3dvcmQsIGlzYWRtaW4pIFZBTFVFUygkMSwgJDIsICQzLCAkNCwgJDUpJyxcclxuICAgIC8vICAgICB2YWx1ZXM6IFtyZXEuYm9keS5lbWFpbCwgcmVxLmJvZHkuZmlyc3ROYW1lLCByZXEuYm9keS5sYXN0TmFtZSwgcmVxLmJvZHkucGFzc3dvcmQsIHRydWVdXHJcbiAgICAvLyAgIH1cclxuICAgIC8vIGNsaWVudC5xdWVyeShxdWVyeXksY2FsbGJhY2soKSlcclxuICAgIC8vdG8gdGVzdFxyXG4gICAgLy8gICBjbGllbnQucXVlcnkocXVlcnl5LCAoZXJyMSxyZXMxKT0+e1xyXG4gICAgLy8gICAgICAgaWYoZXJyMSl7XHJcbiAgICAvLyAgICAgICAgICAgcmVzLmpzb24oe3N0YXR1czpmYWxzZX0pXHJcbiAgICAvLyAgICAgICB9XHJcbiAgICAvLyAgICAgICBlbHNlIGlmIChyZXMxKXtcclxuICAgIC8vICAgICAgICAgICByZXMuanNvbih7c3RhdHVzOnRydWV9KVxyXG4gICAgLy8gICAgICAgfVxyXG4gICAgLy8gICB9KVxyXG4gICAgLy90byB0ZXN0XHJcbiAgICAvL2NvbnNvbGUubG9nKHJlc3VsdClcclxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "user.js"
      ],
      "names": [
        "require",
        "Pool",
        "Client",
        "client",
        "user",
        "password",
        "host",
        "port",
        "database",
        "module",
        "exports",
        "addstaff",
        "req",
        "callback"
      ],
      "mappings": ";;eAAyBA,OAAO,CAAC,IAAD,C;IAAxBC,I,YAAAA,I;IAAMC,M,YAAAA,M;;AAEd,IAAMC,MAAM,GAAG,IAAID,MAAJ,CAAW;AACtBE,EAAAA,IAAI,EAAC,UADiB;AAEtBC,EAAAA,QAAQ,EAAC,UAFa;AAGtBC,EAAAA,IAAI,EAAC,WAHiB;AAItBC,EAAAA,IAAI,EAAC,IAJiB;AAKtBC,EAAAA,QAAQ,EAAC;AALa,CAAX,CAAf;;AAUAC,MAAM,CAACC,OAAP,CAAeC,QAAf,GAA0B,UAACC,GAAD,EAAKC,QAAL,EAAgB,CA2BzC,CA3ByB,CAC1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CJ",
      "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\models",
      "sourcesContent": [
        "const { Pool, Client } = require('pg')\r\n\r\nconst client = new Client({\r\n    user:\"postgres\",\r\n    password:\"00000000\",\r\n    host:\"localhost\",\r\n    port:5432,\r\n    database:\"banka\"\r\n})\r\n\r\n\r\n\r\nmodule.exports.addstaff = (req,callback)=>{\r\n//         execute()\r\n\r\n// async function execute(){\r\n//     try {\r\n//         await client.connect()\r\n//         console.log(\"connected succesfully (post user)\")\r\n//         try {\r\n//             const queryy = {\r\n//                 text: 'INSERT INTO users(email, firstname, lastname, password, isadmin) VALUES($1, $2, $3, $4, $5)',\r\n//                 values: [req.body.email, req.body.firstName, req.body.lastName, req.body.password, true]\r\n//               }\r\n//             const results = await client.query(queryy)\r\n//         }\r\n//         catch(e){\r\n//             console.log(\"query error (post user)\",e)\r\n//         }\r\n//       } catch(err) {\r\n//         console.log(\"connection error (post user)\",err)\r\n//       }\r\n//       finally{\r\n//         await client.end()\r\n//         console.log(\"client disconnected (post user)\")\r\n//         callback()\r\n//       }\r\n// }\r\n        \r\n}\r\n\r\n\r\n\r\n//console.log(req.body)\r\n    // const queryy = {\r\n    //     text: 'INSERT INTO users(email, firstname, lastname, password, isadmin) VALUES($1, $2, $3, $4, $5)',\r\n    //     values: [req.body.email, req.body.firstName, req.body.lastName, req.body.password, true]\r\n    //   }\r\n    // client.query(queryy,callback())\r\n    //to test\r\n    //   client.query(queryy, (err1,res1)=>{\r\n    //       if(err1){\r\n    //           res.json({status:false})\r\n    //       }\r\n    //       else if (res1){\r\n    //           res.json({status:true})\r\n    //       }\r\n    //   })\r\n    //to test\r\n    //console.log(result)\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1570861119906
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\\\\routes\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"filename\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\\\\routes\\\\accounts.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.7.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "filename": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes\\accounts.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes\\accounts.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes\\accounts.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes",
        "sourceFileName": "accounts.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar express = require('express');\n\nvar router = express.Router();\n\nvar _require = require('pg'),\n    Pool = _require.Pool,\n    Client = _require.Client; // const client = new Client({\n//     user:\"postgres\",\n//     password:\"00000000\",\n//     host:\"localhost\",\n//     port:5432,\n//     database:\"banka\"\n// })\n\n\nvar pool = new Pool({\n  user: \"postgres\",\n  password: \"00000000\",\n  host: \"localhost\",\n  port: 5432,\n  database: \"banka\"\n});\nvar app = express();\nrouter.post('/add', function (req, res) {\n  var d = new Date();\n  var day = d.getDate();\n  var month = d.getMonth() + 1;\n  var year = d.getFullYear();\n  var hour = d.getHours();\n  var minute = d.getMinutes();\n  var second = d.getSeconds();\n  var datetime = \"\".concat(day, \"/\").concat(month, \"/\").concat(year, \"-\").concat(hour, \":\").concat(minute, \":\").concat(second);\n  var accounthour = hour;\n  var accountminute = minute;\n  var accountday = day;\n  var accountmonth = month;\n  var accountsecond = second;\n\n  if (hour.toString().length < 2) {\n    accounthour = \"0\".concat(hour);\n  }\n\n  if (minute.toString().length < 2) {\n    accountminute = \"0\".concat(minute);\n  }\n\n  if (day.toString().length < 2) {\n    accountday = \"0\".concat(day);\n  }\n\n  if (month.toString().length < 2) {\n    accountmonth = \"0\".concat(month);\n  }\n\n  if (second.toString().length < 2) {\n    accountsecond = \"0\".concat(second);\n  }\n\n  var accountno = \"\".concat(day).concat(month).concat(accounthour).concat(accountminute).concat(accountsecond);\n  var accountnumber = parseInt(accountno);\n  console.log(accountnumber);\n  console.log(req.body);\n  var queryy = {\n    text: 'INSERT INTO accounts(accountnumber, createdon, owner, type, status, balance, email, imgurl) VALUES($1, $2, $3, $4, $5, $6, $7, $8)',\n    values: [accountnumber, datetime, req.body.firstname + ' ' + req.body.lastname, req.body.type, 'active', req.body.balance, req.body.email, req.body.imgUrl]\n  };\n  pool.connect().then(pool.query(queryy).then(function (result) {\n    res.status(200);\n    res.json({\n      success: true,\n      data: req.body\n    });\n  })[\"catch\"](function (error) {\n    res.status(400);\n    res.json({\n      success: false\n    });\n    console.log(\"error1\", error);\n  }))[\"catch\"](function (err) {\n    res.status(400);\n    res.json({\n      success: false\n    });\n    console.log(\"error2\", error)[\"finally\"](pool.end());\n  });\n});\nrouter.get('/', function (req, res) {\n  pool.connect().then(pool.query('select * from accounts').then(function (result) {\n    console.log(result.rows);\n    res.status(200);\n    res.json({\n      success: true,\n      data: result.rows\n    });\n  })[\"catch\"](function (err) {\n    console.log(err);\n  }))[\"catch\"](function (err) {\n    console.log(err)[\"finally\"](pool.end());\n  });\n});\nrouter.get('/:id', function (req, res) {\n  var id = req.params.id;\n  pool.connect().then(pool.query(\"select * from accounts where id = \".concat(id.toString())).then(function (result) {\n    res.status(200);\n    res.json({\n      success: true,\n      data: result.rows\n    });\n  })[\"catch\"](function (err) {\n    console.log(err);\n  }))[\"catch\"](function (err) {\n    console.log(err)[\"finally\"](pool.end());\n  });\n});\nrouter.post('/email', function (req, res) {\n  var email = req.body.email;\n  console.log(req.body);\n  pool.connect().then(pool.query(\"select * from accounts where email = '\".concat(email, \"'\")).then(function (result) {\n    res.status(200);\n    res.json({\n      success: true,\n      data: result.rows\n    });\n    console.log(\"list of accounts\", result.rows);\n  })[\"catch\"](function (err) {\n    console.log(err);\n  }))[\"catch\"](function (err) {\n    console.log(err)[\"finally\"](pool.end());\n  });\n});\nrouter.post('/deleteaccount', function (req, res) {\n  var id = req.body.id;\n  pool.connect().then(pool.query(\"delete from accounts where id = \".concat(id.toString())).then(function (result) {\n    res.status(200);\n    res.json({\n      success: true,\n      data: result.rows\n    });\n  })[\"catch\"](function (err) {\n    console.log(err);\n  }))[\"catch\"](function (err) {\n    console.log(err)[\"finally\"](pool.end());\n  });\n});\nmodule.exports = router; // execute()\n//     async function execute(){\n//         try {\n//             await client.connect()\n//             console.log(\"connected succesfully (post account)\")\n//             try {\n//                 const queryy = {\n//                         text: 'INSERT INTO accounts(accountnumber, createdon, owner, type, status, balance) VALUES($1, $2, $3, $4, $5, $6)',\n//                         values: [req.body.accountnumber, req.body.createdon, req.body.owner, req.body.type, req.body.status, req.body.balance]\n//                     }\n//                 const results = await client.query(queryy)\n//                 res.json({status:200,data:{success:true}})\n//             }\n//             catch(e){\n//                 res.json({status:404,success:false})\n//             }\n//         } catch(err) {\n//             res.status({status:404,success:false})\n//         }\n//         finally{\n//             await client.end()\n//         }\n//     }\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "accounts.js"
      ],
      "names": [
        "express",
        "require",
        "router",
        "Router",
        "Pool",
        "Client",
        "pool",
        "user",
        "password",
        "host",
        "port",
        "database",
        "app",
        "post",
        "req",
        "res",
        "d",
        "Date",
        "day",
        "getDate",
        "month",
        "getMonth",
        "year",
        "getFullYear",
        "hour",
        "getHours",
        "minute",
        "getMinutes",
        "second",
        "getSeconds",
        "datetime",
        "accounthour",
        "accountminute",
        "accountday",
        "accountmonth",
        "accountsecond",
        "toString",
        "length",
        "accountno",
        "accountnumber",
        "parseInt",
        "console",
        "log",
        "body",
        "queryy",
        "text",
        "values",
        "firstname",
        "lastname",
        "type",
        "balance",
        "email",
        "imgUrl",
        "connect",
        "then",
        "query",
        "result",
        "status",
        "json",
        "success",
        "data",
        "error",
        "err",
        "end",
        "get",
        "rows",
        "id",
        "params",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes",
      "sourcesContent": [
        "const express = require('express')\r\nconst router = express.Router()\r\nconst { Pool, Client } = require('pg')\r\n// const client = new Client({\r\n//     user:\"postgres\",\r\n//     password:\"00000000\",\r\n//     host:\"localhost\",\r\n//     port:5432,\r\n//     database:\"banka\"\r\n// })\r\n\r\nconst pool = new Pool({\r\n    user:\"postgres\",\r\n    password:\"00000000\",\r\n    host:\"localhost\",\r\n    port:5432,\r\n    database:\"banka\"\r\n})\r\n\r\nconst app = express()\r\n\r\nrouter.post('/add',(req,res)=>{\r\n    let d = new Date()\r\n    let day = d.getDate()\r\n    let month = d.getMonth() + 1\r\n    let year = d.getFullYear()\r\n    let hour = d.getHours()\r\n    let minute = d.getMinutes()\r\n    let second = d.getSeconds()\r\n    let datetime = `${day}/${month}/${year}-${hour}:${minute}:${second}`\r\n    let accounthour = hour\r\n    let accountminute = minute\r\n    let accountday = day\r\n    let accountmonth = month\r\n    let accountsecond = second\r\n    if(hour.toString().length<2){\r\n        accounthour=`0${hour}`\r\n    }\r\n    if(minute.toString().length<2){\r\n        accountminute=`0${minute}`\r\n    }\r\n    if(day.toString().length<2){\r\n        accountday=`0${day}`\r\n    }\r\n    if(month.toString().length<2){\r\n        accountmonth=`0${month}`\r\n    }\r\n    if(second.toString().length<2){\r\n        accountsecond=`0${second}`\r\n    }\r\n    let accountno = `${day}${month}${accounthour}${accountminute}${accountsecond}`\r\n    let accountnumber = parseInt(accountno)\r\n    console.log(accountnumber)\r\n    console.log(req.body)\r\n    const queryy = {\r\n                     text: 'INSERT INTO accounts(accountnumber, createdon, owner, type, status, balance, email, imgurl) VALUES($1, $2, $3, $4, $5, $6, $7, $8)',\r\n                     values: [accountnumber, datetime, req.body.firstname + ' ' + req.body.lastname, req.body.type, 'active', req.body.balance,req.body.email,req.body.imgUrl]\r\n                    }\r\n    pool.connect()\r\n     .then(pool.query(queryy)\r\n        .then(result=>{\r\n            res.status(200)\r\n            res.json({success:true,data:req.body})\r\n        })\r\n        .catch(error=>{\r\n            res.status(400)\r\n            res.json({success:false})\r\n            console.log(\"error1\",error)\r\n        \r\n        })) \r\n     .catch(err=>{\r\n         res.status(400)\r\n         res.json({success:false})\r\n         console.log(\"error2\",error)\r\n     .finally(pool.end())\r\n    })   \r\n    }\r\n)\r\n\r\nrouter.get('/', (req,res)=>{\r\n    pool.connect()\r\n        .then(pool.query('select * from accounts')\r\n            .then(result=>{\r\n                console.log(result.rows)\r\n                res.status(200)\r\n                res.json({success:true, data:result.rows})\r\n            })\r\n            .catch(err=>{\r\n                console.log(err)\r\n            })\r\n        )\r\n        .catch(err=>{\r\n            console.log(err)\r\n            .finally(pool.end())\r\n        })\r\n})\r\n\r\nrouter.get('/:id', (req,res)=>{\r\n    let id = req.params.id\r\n    pool.connect()\r\n        .then(pool.query(`select * from accounts where id = ${id.toString()}`)\r\n            .then(result=>{\r\n                res.status(200)\r\n                res.json({success:true, data:result.rows})\r\n            })\r\n            .catch(err=>{\r\n                console.log(err)\r\n            })\r\n        )\r\n        .catch(err=>{\r\n            console.log(err)\r\n            .finally(pool.end())\r\n        })\r\n})\r\n\r\nrouter.post('/email', (req,res)=>{\r\n    let email = req.body.email\r\n    console.log(req.body)\r\n    pool.connect()\r\n        .then(pool.query(`select * from accounts where email = '${email}'`)\r\n            .then(result=>{\r\n                res.status(200)\r\n                res.json({success:true, data:result.rows})\r\n                console.log(\"list of accounts\",result.rows)\r\n            })\r\n            .catch(err=>{\r\n                console.log(err)\r\n            })\r\n        )\r\n        .catch(err=>{\r\n            console.log(err)\r\n            .finally(pool.end())\r\n        })\r\n})\r\n\r\nrouter.post('/deleteaccount', (req,res)=>{\r\n    let id = req.body.id\r\n    pool.connect()\r\n        .then(pool.query(`delete from accounts where id = ${id.toString()}`)\r\n            .then(result=>{\r\n                res.status(200)\r\n                res.json({success:true, data:result.rows})\r\n            })\r\n            .catch(err=>{\r\n                console.log(err)\r\n            })\r\n        )\r\n        .catch(err=>{\r\n            console.log(err)\r\n            .finally(pool.end())\r\n        })\r\n})\r\n\r\nmodule.exports=router\r\n\r\n// execute()\r\n\r\n//     async function execute(){\r\n//         try {\r\n//             await client.connect()\r\n//             console.log(\"connected succesfully (post account)\")\r\n//             try {\r\n//                 const queryy = {\r\n//                         text: 'INSERT INTO accounts(accountnumber, createdon, owner, type, status, balance) VALUES($1, $2, $3, $4, $5, $6)',\r\n//                         values: [req.body.accountnumber, req.body.createdon, req.body.owner, req.body.type, req.body.status, req.body.balance]\r\n//                     }\r\n//                 const results = await client.query(queryy)\r\n//                 res.json({status:200,data:{success:true}})\r\n//             }\r\n//             catch(e){\r\n//                 res.json({status:404,success:false})\r\n//             }\r\n//         } catch(err) {\r\n//             res.status({status:404,success:false})\r\n//         }\r\n//         finally{\r\n//             await client.end()\r\n//         }\r\n//     }"
      ]
    },
    "sourceType": "script",
    "mtime": 1575593012863
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\\\\routes\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"filename\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\\\\routes\\\\transactions.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.7.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "filename": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes\\transactions.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes\\transactions.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes\\transactions.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes",
        "sourceFileName": "transactions.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar express = require('express');\n\nvar router = express.Router();\n\nvar _require = require('pg'),\n    Pool = _require.Pool,\n    Client = _require.Client;\n\nvar nodemailer = require('nodemailer'); //const sendmail = require('sendmail')();\n\n\nvar email = require('./email');\n\nvar pool = new Pool({\n  user: \"postgres\",\n  password: \"00000000\",\n  host: \"localhost\",\n  port: 5432,\n  database: \"banka\"\n});\nvar app = express();\nrouter.post('/add', function (req, res) {\n  var d = new Date();\n  var day = d.getDate();\n  var month = d.getMonth() + 1;\n  var year = d.getFullYear();\n  var hour = d.getHours();\n  var minute = d.getMinutes();\n  var second = d.getSeconds();\n  var datetime = \"\".concat(day, \"/\").concat(month, \"/\").concat(year, \"-\").concat(hour, \":\").concat(minute, \":\").concat(second);\n  var queryy = {\n    text: 'INSERT INTO transactions(type, accountnumber, cashier, amount, oldbalance, newbalance, sender, accountid, datetime) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)',\n    values: [req.body.type, req.body.accountnumber, req.body.cashier, req.body.amount, req.body.oldbalance, req.body.newbalance, req.body.sender, req.body.accountid, datetime]\n  };\n  pool.connect().then(pool.query(queryy).then(function (result) {\n    res.status(200);\n    res.json({\n      success: true,\n      data: req.body\n    });\n    pool.query('UPDATE accounts SET balance = $1 WHERE id = $2', [req.body.newbalance, req.body.accountid]) //just added stuffs\n    .then(pool.query(\"select * from accounts where accountnumber = \".concat(req.body.accountnumber)).then(function (result) {\n      console.log(\"f**cking email\", result.rows[0].email);\n      var transactionemail = result.rows[0].email;\n      email(transactionemail, \"transaction alert\", \"A \".concat(req.body.type, \" transaction of N\").concat(req.body.amount, \" just occured in your account \").concat(req.body.accountnumber, \"; sender:\").concat(req.body.sender || ''));\n    })[\"catch\"](function (err) {\n      console.log(err);\n    }))[\"catch\"](function (err) {\n      console.log(err);\n    }); //\n  })[\"catch\"](function (err) {\n    res.status(400);\n    res.json({\n      success: false\n    });\n    pool.end();\n  }))[\"catch\"](function (err) {\n    console.log(err);\n    pool.end();\n  });\n});\nrouter.post('/deactivate', function (req, res) {\n  console.log(req.body);\n  pool.connect().then(pool.query('UPDATE accounts SET status = $1 WHERE id = $2', [req.body.status, req.body.accountid]).then(function (result) {\n    res.status(200);\n    res.json({\n      success: true,\n      data: req.body\n    });\n  })[\"catch\"](function (err) {\n    res.status(400);\n    res.json({\n      success: false\n    });\n    pool.end();\n  }))[\"catch\"](function (err) {\n    console.log(err);\n    pool.end();\n  });\n});\nrouter.get('/viewtransaction/:id', function (req, res) {\n  var id = req.params.id;\n  pool.connect().then(pool.query(\"select * from transactions where accountid = \".concat(id.toString())).then(function (result) {\n    res.status(200);\n    res.json({\n      success: true,\n      data: result.rows\n    }); //console.log(result.rows)\n  })[\"catch\"](function (err) {\n    res.status(400);\n    res.json({\n      success: false\n    });\n    console.log(err);\n    pool.end();\n  }))[\"catch\"](function (err) {\n    console.log(err);\n    pool.end();\n  });\n});\nmodule.exports = router; // execute()\n//     async function execute(){\n//         try {\n//             await client.connect()\n//             console.log(\"connected succesfully (post transaction)\")\n//             try {\n//                 const queryy = {\n//                         text: 'INSERT INTO transactions(createdon, type, accountnumber, cashier, amount, oldbalance, newbalance) VALUES($1, $2, $3, $4, $5, $6, $7)',\n//                         values: [req.body.createdon, req.body.type, req.body.accountnumber, req.body.cashier, req.body.amount, req.body.oldbalance, req.body.newbalance]\n//                     }\n//                 const results = await client.query(queryy)\n//                 res.json({status:200,data:{success:true}})\n//             }\n//             catch(e){\n//                 res.json({status:404,success:false})\n//             }\n//         } catch(err) {\n//             res.status({status:404,success:false})\n//         }\n//         finally{\n//             await client.end()\n//         }\n//     }\n// async..await is not allowed in global scope, must use a wrapper\n// async function main() {\n//     // Generate test SMTP service account from ethereal.email\n//     // Only needed if you don't have a real mail account for testing\n//     let testAccount = await nodemailer.createTestAccount();\n//     // create reusable transporter object using the default SMTP transport\n//     let transporter = nodemailer.createTransport({\n//         host: 'smtp.ethereal.email',\n//         port: 587,\n//         secure: false, // true for 465, false for other ports\n//         auth: {\n//             user: testAccount.user, // generated ethereal user\n//             pass: testAccount.pass // generated ethereal password\n//         }\n//     });\n//     // send mail with defined transport object\n//     let info = await transporter.sendMail({\n//         from: '\"Fred Foo 👻\" <foo@example.com>', // sender address\n//         to: 'adigunibrahim574@gmail.com', // list of receivers\n//         subject: 'Hello ✔', // Subject line\n//         text: 'Hello world?', // plain text body\n//         html: '<b>Hello world?</b>' // html body\n//     });\n//     console.log('Message sent: %s', info.messageId);\n//     // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\n//     // Preview only available when sending through an Ethereal account\n//     console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\n//     // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\n// }\n// main().catch(console.error);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "transactions.js"
      ],
      "names": [
        "express",
        "require",
        "router",
        "Router",
        "Pool",
        "Client",
        "nodemailer",
        "email",
        "pool",
        "user",
        "password",
        "host",
        "port",
        "database",
        "app",
        "post",
        "req",
        "res",
        "d",
        "Date",
        "day",
        "getDate",
        "month",
        "getMonth",
        "year",
        "getFullYear",
        "hour",
        "getHours",
        "minute",
        "getMinutes",
        "second",
        "getSeconds",
        "datetime",
        "queryy",
        "text",
        "values",
        "body",
        "type",
        "accountnumber",
        "cashier",
        "amount",
        "oldbalance",
        "newbalance",
        "sender",
        "accountid",
        "connect",
        "then",
        "query",
        "result",
        "status",
        "json",
        "success",
        "data",
        "console",
        "log",
        "rows",
        "transactionemail",
        "err",
        "end",
        "get",
        "id",
        "params",
        "toString",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes",
      "sourcesContent": [
        "const express = require('express')\r\nconst router = express.Router()\r\nconst { Pool, Client } = require('pg')\r\nconst nodemailer = require('nodemailer');\r\n//const sendmail = require('sendmail')();\r\nconst email = require('./email')\r\nconst pool = new Pool({\r\n    user:\"postgres\",\r\n    password:\"00000000\",\r\n    host:\"localhost\",\r\n    port:5432,\r\n    database:\"banka\"\r\n})\r\n\r\n\r\nconst app = express()\r\n\r\n\r\n\r\n\r\nrouter.post('/add',(req,res)=>{\r\n    let d = new Date()\r\n    let day = d.getDate()\r\n    let month = d.getMonth() + 1\r\n    let year = d.getFullYear()\r\n    let hour = d.getHours()\r\n    let minute = d.getMinutes()\r\n    let second = d.getSeconds()\r\n    let datetime = `${day}/${month}/${year}-${hour}:${minute}:${second}`\r\n    const queryy = {\r\n                     text: 'INSERT INTO transactions(type, accountnumber, cashier, amount, oldbalance, newbalance, sender, accountid, datetime) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9)',\r\n                     values: [req.body.type, req.body.accountnumber, req.body.cashier, req.body.amount, req.body.oldbalance, req.body.newbalance, req.body.sender, req.body.accountid, datetime]\r\n                    }\r\n    pool.connect()\r\n     .then(pool.query(queryy)\r\n        .then(result=>{\r\n            res.status(200)\r\n            res.json({success:true,data:req.body})\r\n            pool.query(\r\n                'UPDATE accounts SET balance = $1 WHERE id = $2',\r\n                [req.body.newbalance, req.body.accountid])\r\n                //just added stuffs\r\n            .then(pool.query(    \r\n                `select * from accounts where accountnumber = ${req.body.accountnumber}`\r\n            )\r\n                .then(result=>{\r\n                    console.log(\"f**cking email\",result.rows[0].email)\r\n                    let transactionemail = result.rows[0].email\r\n                    email(transactionemail,\"transaction alert\",`A ${req.body.type} transaction of N${req.body.amount} just occured in your account ${req.body.accountnumber}; sender:${req.body.sender||''}`)\r\n                })\r\n                .catch(err=>{\r\n                    console.log(err)\r\n                })\r\n            )\r\n            .catch(err=>{\r\n                console.log(err)\r\n            })\r\n\r\n        //\r\n        })\r\n        \r\n\r\n        .catch(\r\n            err=>{\r\n                res.status(400)\r\n                res.json({success:false})\r\n                pool.end()\r\n            }\r\n        ))\r\n     .catch(err=>{\r\n         console.log(err)\r\n         pool.end()\r\n     })\r\n    \r\n    }\r\n)\r\n\r\nrouter.post('/deactivate',(req,res)=>{\r\n    console.log(req.body)\r\n    pool.connect()\r\n     .then(pool.query('UPDATE accounts SET status = $1 WHERE id = $2',\r\n            [req.body.status, req.body.accountid])\r\n        .then(result=>{\r\n            res.status(200)\r\n            res.json({success:true,data:req.body})\r\n        })\r\n        .catch(\r\n            err=>{\r\n                res.status(400)\r\n                res.json({success:false})\r\n                pool.end()\r\n            }\r\n        ))\r\n     .catch(err=>{\r\n         console.log(err)\r\n         pool.end()\r\n     })\r\n})\r\n\r\nrouter.get('/viewtransaction/:id',(req,res)=>{\r\n    let id = req.params.id\r\n    pool.connect()\r\n     .then(pool.query(`select * from transactions where accountid = ${id.toString()}`)\r\n        .then(result=>{\r\n            res.status(200)\r\n            res.json({success:true,data:result.rows})\r\n            //console.log(result.rows)\r\n        })\r\n        .catch(\r\n            err=>{\r\n                res.status(400)\r\n                res.json({success:false})\r\n                console.log(err)\r\n                pool.end()\r\n            }\r\n        ))\r\n     .catch(err=>{\r\n         console.log(err)\r\n         pool.end()\r\n     })\r\n})\r\n\r\nmodule.exports=router\r\n\r\n// execute()\r\n\r\n//     async function execute(){\r\n//         try {\r\n//             await client.connect()\r\n//             console.log(\"connected succesfully (post transaction)\")\r\n//             try {\r\n//                 const queryy = {\r\n//                         text: 'INSERT INTO transactions(createdon, type, accountnumber, cashier, amount, oldbalance, newbalance) VALUES($1, $2, $3, $4, $5, $6, $7)',\r\n//                         values: [req.body.createdon, req.body.type, req.body.accountnumber, req.body.cashier, req.body.amount, req.body.oldbalance, req.body.newbalance]\r\n//                     }\r\n//                 const results = await client.query(queryy)\r\n//                 res.json({status:200,data:{success:true}})\r\n//             }\r\n//             catch(e){\r\n//                 res.json({status:404,success:false})\r\n//             }\r\n//         } catch(err) {\r\n//             res.status({status:404,success:false})\r\n//         }\r\n//         finally{\r\n//             await client.end()\r\n//         }\r\n//     }\r\n\r\n// async..await is not allowed in global scope, must use a wrapper\r\n// async function main() {\r\n//     // Generate test SMTP service account from ethereal.email\r\n//     // Only needed if you don't have a real mail account for testing\r\n//     let testAccount = await nodemailer.createTestAccount();\r\n\r\n//     // create reusable transporter object using the default SMTP transport\r\n//     let transporter = nodemailer.createTransport({\r\n//         host: 'smtp.ethereal.email',\r\n//         port: 587,\r\n//         secure: false, // true for 465, false for other ports\r\n//         auth: {\r\n//             user: testAccount.user, // generated ethereal user\r\n//             pass: testAccount.pass // generated ethereal password\r\n//         }\r\n//     });\r\n\r\n//     // send mail with defined transport object\r\n//     let info = await transporter.sendMail({\r\n//         from: '\"Fred Foo 👻\" <foo@example.com>', // sender address\r\n//         to: 'adigunibrahim574@gmail.com', // list of receivers\r\n//         subject: 'Hello ✔', // Subject line\r\n//         text: 'Hello world?', // plain text body\r\n//         html: '<b>Hello world?</b>' // html body\r\n//     });\r\n\r\n//     console.log('Message sent: %s', info.messageId);\r\n//     // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\r\n\r\n//     // Preview only available when sending through an Ethereal account\r\n//     console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));\r\n//     // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...\r\n// }\r\n\r\n// main().catch(console.error);\r\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1575593012762
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\\\\routes\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"filename\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\\\\routes\\\\email.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Adigun\\\\Desktop\\\\banka\\\\banka-api\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.7.4": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "filename": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes\\email.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes\\email.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes\\email.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes",
        "sourceFileName": "email.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar nodemailer = require('nodemailer'); //const stuffs = require('./routes/stuffs')\n\n\nvar receiver = 'adigunibrahim574@gmail.com';\nvar subject = 'still testting';\nvar text = 'Hello from nodejs';\n\nvar sendAnEmail = function sendAnEmail(receiver, subject, text) {\n  var transporter = nodemailer.createTransport({\n    service: 'gmail',\n    auth: {\n      user: 'techadigun@gmail.com',\n      pass: 'adedotun96'\n    }\n  });\n  var mailOptions = {\n    //from: 'techadigun@gmail.com',\n    from: '\"Banka\" <techadigun@gmail.com>',\n    to: receiver,\n    subject: subject,\n    text: text\n  };\n  transporter.sendMail(mailOptions, function (error, info) {\n    if (error) {\n      console.log(error);\n    } else {\n      console.log('Email sent: ' + info.response);\n    }\n  });\n}; //sendAnEmail(receiver,subject,text)\n\n\nmodule.exports = sendAnEmail;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVtYWlsLmpzIl0sIm5hbWVzIjpbIm5vZGVtYWlsZXIiLCJyZXF1aXJlIiwicmVjZWl2ZXIiLCJzdWJqZWN0IiwidGV4dCIsInNlbmRBbkVtYWlsIiwidHJhbnNwb3J0ZXIiLCJjcmVhdGVUcmFuc3BvcnQiLCJzZXJ2aWNlIiwiYXV0aCIsInVzZXIiLCJwYXNzIiwibWFpbE9wdGlvbnMiLCJmcm9tIiwidG8iLCJzZW5kTWFpbCIsImVycm9yIiwiaW5mbyIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsVUFBVSxHQUFHQyxPQUFPLENBQUMsWUFBRCxDQUExQixDLENBQ0E7OztBQUVBLElBQUlDLFFBQVEsR0FBRyw0QkFBZjtBQUNBLElBQUlDLE9BQU8sR0FBRyxnQkFBZDtBQUNBLElBQUlDLElBQUksR0FBRyxtQkFBWDs7QUFFQSxJQUFJQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFDSCxRQUFELEVBQVdDLE9BQVgsRUFBb0JDLElBQXBCLEVBQTJCO0FBRTNDLE1BQU1FLFdBQVcsR0FBR04sVUFBVSxDQUFDTyxlQUFYLENBQTJCO0FBQzdDQyxJQUFBQSxPQUFPLEVBQUUsT0FEb0M7QUFFN0NDLElBQUFBLElBQUksRUFBRTtBQUNKQyxNQUFBQSxJQUFJLEVBQUUsc0JBREY7QUFFSkMsTUFBQUEsSUFBSSxFQUFFO0FBRkY7QUFGdUMsR0FBM0IsQ0FBcEI7QUFRRSxNQUFNQyxXQUFXLEdBQUc7QUFDbEI7QUFDQUMsSUFBQUEsSUFBSSxFQUFFLGdDQUZZO0FBR2xCQyxJQUFBQSxFQUFFLEVBQUVaLFFBSGM7QUFJbEJDLElBQUFBLE9BQU8sRUFBRUEsT0FKUztBQUtsQkMsSUFBQUEsSUFBSSxFQUFFQTtBQUxZLEdBQXBCO0FBUUFFLEVBQUFBLFdBQVcsQ0FBQ1MsUUFBWixDQUFxQkgsV0FBckIsRUFBa0MsVUFBU0ksS0FBVCxFQUFnQkMsSUFBaEIsRUFBcUI7QUFDckQsUUFBSUQsS0FBSixFQUFXO0FBQ1RFLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSCxLQUFaO0FBQ0QsS0FGRCxNQUVPO0FBQ0xFLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGlCQUFpQkYsSUFBSSxDQUFDRyxRQUFsQztBQUNEO0FBQ0YsR0FORDtBQVNILENBM0JELEMsQ0E2QkE7OztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBZWpCLFdBQWYiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxBZGlndW5cXERlc2t0b3BcXGJhbmthXFxiYW5rYS1hcGlcXHJvdXRlcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG5vZGVtYWlsZXIgPSByZXF1aXJlKCdub2RlbWFpbGVyJylcclxuLy9jb25zdCBzdHVmZnMgPSByZXF1aXJlKCcuL3JvdXRlcy9zdHVmZnMnKVxyXG5cclxubGV0IHJlY2VpdmVyID0gJ2FkaWd1bmlicmFoaW01NzRAZ21haWwuY29tJ1xyXG5sZXQgc3ViamVjdCA9ICdzdGlsbCB0ZXN0dGluZydcclxubGV0IHRleHQgPSAnSGVsbG8gZnJvbSBub2RlanMnXHJcblxyXG5sZXQgc2VuZEFuRW1haWwgPSAocmVjZWl2ZXIsIHN1YmplY3QsIHRleHQpPT57XHJcblxyXG4gIGNvbnN0IHRyYW5zcG9ydGVyID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoe1xyXG4gICAgc2VydmljZTogJ2dtYWlsJyxcclxuICAgIGF1dGg6IHtcclxuICAgICAgdXNlcjogJ3RlY2hhZGlndW5AZ21haWwuY29tJyxcclxuICAgICAgcGFzczogJ2FkZWRvdHVuOTYnXHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IG1haWxPcHRpb25zID0ge1xyXG4gICAgICAvL2Zyb206ICd0ZWNoYWRpZ3VuQGdtYWlsLmNvbScsXHJcbiAgICAgIGZyb206ICdcIkJhbmthXCIgPHRlY2hhZGlndW5AZ21haWwuY29tPicsXHJcbiAgICAgIHRvOiByZWNlaXZlcixcclxuICAgICAgc3ViamVjdDogc3ViamVjdCxcclxuICAgICAgdGV4dDogdGV4dFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdHJhbnNwb3J0ZXIuc2VuZE1haWwobWFpbE9wdGlvbnMsIGZ1bmN0aW9uKGVycm9yLCBpbmZvKXtcclxuICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdFbWFpbCBzZW50OiAnICsgaW5mby5yZXNwb25zZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIFxyXG5cclxufVxyXG5cclxuLy9zZW5kQW5FbWFpbChyZWNlaXZlcixzdWJqZWN0LHRleHQpXHJcblxyXG5tb2R1bGUuZXhwb3J0cz1zZW5kQW5FbWFpbCJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "email.js"
      ],
      "names": [
        "nodemailer",
        "require",
        "receiver",
        "subject",
        "text",
        "sendAnEmail",
        "transporter",
        "createTransport",
        "service",
        "auth",
        "user",
        "pass",
        "mailOptions",
        "from",
        "to",
        "sendMail",
        "error",
        "info",
        "console",
        "log",
        "response",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B,C,CACA;;;AAEA,IAAIC,QAAQ,GAAG,4BAAf;AACA,IAAIC,OAAO,GAAG,gBAAd;AACA,IAAIC,IAAI,GAAG,mBAAX;;AAEA,IAAIC,WAAW,GAAG,SAAdA,WAAc,CAACH,QAAD,EAAWC,OAAX,EAAoBC,IAApB,EAA2B;AAE3C,MAAME,WAAW,GAAGN,UAAU,CAACO,eAAX,CAA2B;AAC7CC,IAAAA,OAAO,EAAE,OADoC;AAE7CC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,sBADF;AAEJC,MAAAA,IAAI,EAAE;AAFF;AAFuC,GAA3B,CAApB;AAQE,MAAMC,WAAW,GAAG;AAClB;AACAC,IAAAA,IAAI,EAAE,gCAFY;AAGlBC,IAAAA,EAAE,EAAEZ,QAHc;AAIlBC,IAAAA,OAAO,EAAEA,OAJS;AAKlBC,IAAAA,IAAI,EAAEA;AALY,GAApB;AAQAE,EAAAA,WAAW,CAACS,QAAZ,CAAqBH,WAArB,EAAkC,UAASI,KAAT,EAAgBC,IAAhB,EAAqB;AACrD,QAAID,KAAJ,EAAW;AACTE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD,KAFD,MAEO;AACLE,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBF,IAAI,CAACG,QAAlC;AACD;AACF,GAND;AASH,CA3BD,C,CA6BA;;;AAEAC,MAAM,CAACC,OAAP,GAAejB,WAAf",
      "sourceRoot": "C:\\Users\\Adigun\\Desktop\\banka\\banka-api\\routes",
      "sourcesContent": [
        "const nodemailer = require('nodemailer')\r\n//const stuffs = require('./routes/stuffs')\r\n\r\nlet receiver = 'adigunibrahim574@gmail.com'\r\nlet subject = 'still testting'\r\nlet text = 'Hello from nodejs'\r\n\r\nlet sendAnEmail = (receiver, subject, text)=>{\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth: {\r\n      user: 'techadigun@gmail.com',\r\n      pass: 'adedotun96'\r\n    }\r\n  });\r\n    \r\n    const mailOptions = {\r\n      //from: 'techadigun@gmail.com',\r\n      from: '\"Banka\" <techadigun@gmail.com>',\r\n      to: receiver,\r\n      subject: subject,\r\n      text: text\r\n    };\r\n    \r\n    transporter.sendMail(mailOptions, function(error, info){\r\n      if (error) {\r\n        console.log(error);\r\n      } else {\r\n        console.log('Email sent: ' + info.response);\r\n      }\r\n    });\r\n  \r\n\r\n}\r\n\r\n//sendAnEmail(receiver,subject,text)\r\n\r\nmodule.exports=sendAnEmail"
      ]
    },
    "sourceType": "script",
    "mtime": 1572469017835
  }
}